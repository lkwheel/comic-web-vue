
services:
  backend:
    image: 'docker-spring-boot-postgres:latest'
    build: .
    container_name: comic-web-backend-app
    depends_on:
      db:
        condition: service_healthy
    environment:
      - "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}"
      - "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}"
      - "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}"
      - "SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}"
    ports:
      - ${HOST_SERVER_PORT}-${SERVER_PORT}
    networks:
      - front-back
      - back-db

  db:
    image: 'postgres:13.1-alpine'
    ports:
      - ${POSTGRES_HOST_PORT}:${POSTGRES_CONTAINER_PORT}
    container_name: db
    environment:
      - "POSTGRES_USER=${SPRING_DATASOURCE_USERNAME}"
      - "POSTGRES_PASSWORD=${SPRING_DATASOURCE_PASSWORD}"
      - "POSTGRES_DB=${POSTGRES_DB}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - type: volume
        source: local_pgdata
        target: "${PG_VOLUME_DATA}"
    networks:
      - back-db

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - ${PGADMIN_HOST_PORT}:80
    environment:
      - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
      - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
    volumes:
      - type: volume
        source: pgadmin-data
        target: "${PGADMIN_DATA_VOLUME}"

networks:
  back-db:
    driver: bridge
  front-back:
    driver: bridge

volumes:
  local_pgdata:
  pgadmin-data:
